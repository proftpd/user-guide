<refentry id="SQLNamedQuery">
<?dbhtml filename="config_ref_SQLNamedQuery.html">
<refentryinfo>
  <keywordset>
    <keyword>
      mod_sql
    </keyword>
  </keywordset>
</refentryinfo>
<refmeta>
<refentrytitle>
<indexterm><primary>SQLNamedQuery</primary></indexterm>
SQLNamedQuery
</refentrytitle>
</refmeta>
<refnamediv>
<refname>SQLNamedQuery</refname>
<refpurpose>Specify a query and an identifier for SQLShowInfo and SQLLog</refpurpose>
</refnamediv>

<refsynopsisdiv>
<cmdsynopsis>
<command>SQLNamedQuery</command>
<arg choice="opt">
  <option>"name" limit|regex|ip value</option>
</arg>
<!--
<arg choice="opt" rep="repeat">file</arg>
-->
</cmdsynopsis>
 
<variablelist><title></title>
<varlistentry><term><synopsis>Default</synopsis></term>
<listitem> <para>
(docs incomplete)
</para> </listitem>
</varlistentry>

<varlistentry><term><synopsis>Context</synopsis></term>
<listitem> <para>
server config, &lt;Global&gt;, &lt;VirtualHost&gt;, &lt;Anonymous&gt;, &lt;Limit&gt;, .ftpaccess
</para> </listitem>
</varlistentry>

<varlistentry><term><synopsis>Module</synopsis></term>
<listitem> <para>
mod_sql
</para> </listitem>
</varlistentry>

<varlistentry><term><synopsis>Compatibility</synopsis></term>
<listitem> <para>
1.2.5rc1 and later
</para> </listitem>
</varlistentry>
</variablelist>
</refsynopsisdiv>

<refsect1>
<title>Description</title>
<para>
SQLNamedQuery specifies a query and an identifier (name) for later use by
SQLShowInfo and SQLLog.
</para>

<para>
It is strongly recommended that you read documentation on the LogFormat
and ExtendedLog directives, as the meta-sequences available to SQLNamedQuery
are largely equivalent.
</para>

<para>
The first parameter, name, should be unique across all named queries and
must not contain spaces. The result of re-using a name is undefined.
</para>

<para>
The second parameter, type, is the type of query, either "SELECT", "UPDATE",
"INSERT", or "FREEFORM". See the note below for information on FREEFORM type
queries.
</para>

<para>
The third parameter is the substance of the database query itself; this
should match the form of the second parameter. The meta-sequences accepted
are exactly equivalent to the LogFormat directive except the following are
not accepted:
</para>

<itemizedlist bullet>
<listitem>
<para>%{FOOBAR}e</para>
<para>
For LogFormat, this logs the content of environment variable "FOOBAR". This
is not bavailable in mod_sql.
</para>
</listitem>

<listitem>
<para>%{format}t and %t</para>
<para>
These two meta-sequences logged the local server time; they are not available
in mod_sql. Your database undoubtedly provides another way to get the time;
for example, MySQL provides the now() function.
</para>
</listitem>
</itemizedlist>

<para>
and the following is in addition to the LogFormat meta-sequences:
<para>

<itemizedlist bullet>
<listitem>
<para>%d</para>
<para>
The current working directory or "-" if none.
</para>
</listitem>

<listitem>
<para>%{n}</para>
<para>
This meta-sequence is used internally by mod_sql and other third-party
modules and patches to pass information to the database. Using this
meta-sequence in anything other than an INSERT or UPDATE query is an
error, and using this meta-sequence unless directed to by a third-party
module or patch is also an error.
</para>
</listitem>
</itemizedlist>

<para>
The correct form of a query will be built from the directive arguments,
except in the case of FREEFORM queries which will be sent directly to the
database. The examples below show the way queries are built from the arguments.
</para>

<para>
The fourth parameter, table, is only necessary for UPDATE or INSERT type
queries, but is required for those types.
</para>

<para>
Note: FREEFORM queries are a necessary evil; the simplistic query semantics
of the UPDATE, INSERT, and SELECT type queries do not sufficiently expose
the capabilities of most backend databases. At the same time, using a
FREEFORM query makes it impossible for mod_sql to check whether the query
type is appropriate, making sure that a SELECT query is not used in a SQLLog
directive, for instance. Wherever possible, it is recommended that a specific
query type be used.
</para>

</refsect1>

<refsect1>
<title>See also</title>
<para>
<link linkend="SQLShowInfo">SQLShowInfo</link>
<link linkend="SQLLog">SQLLog</link>
<link linkend="LogFormat">LogFormat</link>
<link linkend="ExtendedLog">ExtendedLog</link>
</para>
</refsect1>

<refsect1>
<title>Examples</title>

<literallayout>
SQLNamedQuery count SELECT "count from users where userid='%u'"
</literallayout>
<para>
creates a query named "count" which could be used by SQLShowInfo to inform
a user of their login count. The actual query would look something like
"SELECT count FROM users WHERE userid='matilda'" for user "matilda".
</para>


<literallayout>
SQLNamedQuery updatecount UPDATE "count=count+1 WHERE userid='%u'" users
</literallayout>
<para>
creates a query named "updatecount" which could be used by SQLLog to update
a user login counter in the table users. The actual query would look something
like "UPDATE users SET count=count+1 WHERE userid='persephone'" for user
"persephone".
</para>


<literallayout>
SQLNamedQuery accesslog INSERT "now(), '%u'" accesslog
</literallayout>
<para>
creates a query named "accesslog" which could be used by SQLLog to track
access times by clients. The actual query would look something like "INSERT
INTO accesslog VALUES (now(), 'pandora')" for user "pandora". Note that this
may be too simplistic for your table structure, since most databases require
data for all columns to be provided in an INSERT statement of this form. See
the following FREEFORM query for an example of something which may suit your
needs better.
</para>


<literallayout>
SQLNamedQuery accesslog FREEFORM "INSERT INTO accesslog(date, user) VALUES (now(), '%u')"
</literallayout>
<para>
creates a query named "accesslog" which could be used by SQLLog to track
access times by clients. The actual query would look something like "INSERT
INTO accesslog(date, user) VALUES (now(), 'tilda')" for user "tilda".
</para>
</refsect1>
</refentry>

