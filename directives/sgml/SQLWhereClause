<refentry id="SQLWhereClause">
<?dbhtml filename="config_ref_SQLWhereClause.html">
<refmeta>
<refentrytitle>
<indexterm><primary>SQLWhereClause</primary></indexterm>
SQLWhereClause
</refentrytitle>
</refmeta>
<refnamediv>
<refname>SQLWhereClause</refname>
<refpurpose>FIXME FIXME</refpurpose>
</refnamediv>

<refsynopsisdiv>
<cmdsynopsis>
<command>SQLWhereClause</command>
<arg choice="opt">
  <option>whereclause</option>
</arg>
<!--
<arg choice="opt" rep="repeat">file</arg>
-->
</cmdsynopsis>

<variablelist><title></title>
<varlistentry><term><synopsis>Default</synopsis></term>
<listitem> <para>
none
</para> </listitem>
</varlistentry>

<varlistentry><term><synopsis>Context</synopsis></term>
<listitem> <para>
server config, &lt;Global&gt;, &lt;VirtualHost&gt;
</para> </listitem>
</varlistentry>

<varlistentry><term><synopsis>Module</synopsis></term>
<listitem> <para>
mod_sql
</para> </listitem>
</varlistentry>

<varlistentry><term><synopsis>Compatibility</synopsis></term>
<listitem> <para>
1.2.0 and later
</para> </listitem>
</varlistentry>
</variablelist>
</refsynopsisdiv>

<refsect1>
<title>Description</title>
<para>
This directive deprecates 'SQLKey' and 'SQLKeyField'.

Specifies a where clause that is added to every user query (this has
no effect on group queries).  The where clause *must* contain all
relevant punctuation, and *must not* contain a leading 'and'.

As an example of switching from the old-style 'SQLKey' and
'SQLKeyField' directives, if you had:

SQLKey           true
SQLKeyfield      LoginAllowed

You would now use:

SQLWhereClause   "LoginAllowed = 'true'"

This would be appended to every user-related query as the string 

" and (LoginAllowed = 'true')"
</para>
</refsect1>

</refentry>

