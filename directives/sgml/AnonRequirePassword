<refentry id="AnonRequirePassword">
<?dbhtml filename="config_ref_AnonRequirePassword.html">
<refmeta>
<refentrytitle>
<indexterm><primary>AnonRequirePassword</primary></indexterm>
AnonRequirePassword
</refentrytitle>
</refmeta>
<refnamediv>
<refname>AnonRequirePassword</refname>
<refpurpose>Make anonymous users supply a valid password</refpurpose>
</refnamediv>

<refsynopsisdiv>
<cmdsynopsis>
<command>AnonRequirePassword</command>
<arg choice="opt">
  <option>on|off</option>
</arg>
<!--
<arg choice="opt" rep="repeat">file</arg>
-->
</cmdsynopsis>

<variablelist><title></title>
<varlistentry><term><synopsis>Default</synopsis></term>
<listitem> <para>
AnonRequirePassword off
</para> </listitem>
</varlistentry>

<varlistentry><term><synopsis>Context</synopsis></term>
<listitem> <para>
&lt;Anonymous&gt;
</para> </listitem>
</varlistentry>

<varlistentry><term><synopsis>Module</synopsis></term>
<listitem> <para>
mod_core
</para> </listitem>
</varlistentry>

<varlistentry><term><synopsis>Compatibility</synopsis></term>
<listitem> <para>
0.99.0 and later
</para> </listitem>
</varlistentry>
</variablelist>
</refsynopsisdiv>

<refsect1>
<title>Description</title>
<para>
Normally, anonymous FTP logins do not require the client to authenticate themselves 
via the normal method of a transmitted cleartext password which is hashed and 
matched against an existing system user's password. Instead, anonymous logins 
are expected to enter their e-mail address when prompted for a password. Enabling 
the AnonRequirePassword directive requires anonymous logins to enter a valid 
password which must match the password of the user that the anonymous daemon 
runs as.  However using AuthUsingAlias
authentication can be matched against the password of the login username.
This can be used to create &quot;guest&quot; accounts, which function
exactly as normal anonymous logins do (and thus present a
&quot;chrooted&quot; 
protected file system to the client), but require a valid password on the server's 
host system.</para>

</refsect1>

<refsect1>
<title>See also</title>
<para>
<!--
<link linkend=""></link>
-->
</para>
</refsect1>

<refsect1>
<title>Examples</title>
<programlisting>
Example of a &quot;guest&quot; account configuration:
&lt;Anonymous ~roger&gt;
User roger
Group other
UserAlias proftpd roger
AnonRequirePassword on
# Deny write operations to all directories, underneath root-dir
# Default is to allow, so we don't need a &lt;Limit&gt; for read operations.
&lt;Directory *&gt;
&lt;Limit WRITE&gt;
DenyAll
&lt;/Limit&gt;
&lt;/Directory&gt;
# Deny all read/write operations in incoming. Because these are command-group
# limits, we can explicitly permit certain operations which will take precedence
# over our group limit.
&lt;Directory incoming&gt;
&lt;Limit READ WRITE&gt;
DenyAll
&lt;/Limit&gt;
# The only command allowed in incoming is STOR (transfer file from client 
to server)
&lt;Limit STOR&gt;
AllowAll
&lt;/Limit&gt;
&lt;/Directory&gt;
&lt;/Anonymous&gt;
</programlisting>
<para>
<!--
For examples, see 
<link linkend="Class">Class</link>
-->
</para>
</refsect1>

</refentry>
